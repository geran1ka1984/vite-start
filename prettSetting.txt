{
  "semi": true,
  "singleQuote": true,
  "jsxSingleQuote": true,
  "arrowParens": "always",
  "max-len": ["error", 120, 2], 
  "trailingComma": "all",
  "tabWidth": 2,
  "bracketSpacing": true,
  "useTabs": false,
  "endOfLine": "lf",
  "printWidth": 120,
  "bracketSameLine": true,
  "htmlWhitespaceSensitivity": "css",
  "insertPragma": false,
  "singleAttributePerLine": false,
  "proseWrap": "preserve",
  "quoteProps": "as-needed",
  "requirePragma": false,
  "vueIndentScriptAndStyle": false,
  "embeddedLanguageFormatting": "auto"

}

/*
//! 1. "semi": true, - В конце операторов ставьте точку с запятой.
// true- Добавляйте точку с запятой в конце каждого утверждения.
// false- Добавляйте точки с запятой только в начале строк, которые могут привести к сбоям ASI .

//! 2. "singleQuote": true, - Используйте одинарные кавычки вместо двойных.

//! 3. "jsxSingleQuote": true, - Используйте одинарные кавычки вместо двойных в JSX.

//! 4. "arrowParens": "avoid", 
//"always"- Всегда включайте скобки. Пример:(x) => x
//"avoid"- Опускайте скобки, когда это возможно. Пример:x => x


//! 6. "trailingComma": "all"
// "all"- Завершающие запятые везде, где это возможно (включая параметры функций и вызовы ). Для запуска кода JavaScript, отформатированного таким образом, необходим движок, поддерживающий ES2017 (Node.js 8+ или современный браузер) или компиляцию нижнего уровня . Это также позволяет использовать завершающие запятые в параметрах типа в TypeScript (поддерживается с версии TypeScript 2.7, выпущенной в январе 2018 года).
// "es5"- Завершающие запятые были допустимы в ES5 (объекты, массивы и т. д.). Завершающие запятые в параметрах типа в TypeScript и Flow.
// "none"- Запятые не нужны.

//! 7. "tabWidth": 2, - Укажите количество пробелов на уровень отступа.

//! 8."bracketSpacing": true, - Печатать пробелы между скобками в объектных литералах.

//! 9. "useTabs": false, - Отступы строк делайте табуляцией вместо пробелов.

//! 10. "endOfLine": "lf", - 
// "lf"– Только перевод строки ( \n), распространено в Linux и macOS, а также внутри репозиториев git
// "crlf"- Символы возврата каретки и перевода строки ( \r\n), распространенные в Windows
// "cr"- Только символ возврата каретки ( \r), используется очень редко
// "auto"- Сохранение существующих окончаний строк (смешанные значения в одном файле нормализуются путем просмотра того, что используется после первой строки)

//! 11. "printWidth": 120, - Укажите длину строки, на которую принтер будет переносить данные.

//! 12. "bracketSameLine": true, - Поместите >элемент HTML (HTML, JSX, Vue, Angular), состоящий из нескольких строк, в конец последней строки, а не размещайте его отдельно на следующей строке (не относится к самозакрывающимся элементам).

//! 13. "htmlWhitespaceSensitivity": "css",
// "css"- Соблюдать значение по умолчанию displayсвойства CSS. Для Handlebars обрабатывается так же, как strict.
// "strict"- Пробелы (или их отсутствие) вокруг всех тегов считаются существенными.
// "ignore"- Пробелы (или их отсутствие) вокруг всех тегов считаются несущественными.

//! 14. "insertPragma": false, - Prettier может вставлять специальный @formatмаркер в начало файлов, указывающий, что файл был отформатирован с помощью Prettier. Это хорошо работает при использовании в тандеме с --require-pragmaопцией. Если в начале файла уже есть docblock, то эта опция добавит к нему новую строку с @formatмаркером.

//! 15. "singleAttributePerLine": false, - Обеспечьте наличие одного атрибута на строку в HTML, Vue и JSX.
// false- Не применяйте только один атрибут в каждой строке.
// true- Обеспечить наличие одного атрибута на строку.

//! 16. "proseWrap": "preserve"
// "always"- Переносите текст, если он превышает ширину печати.
// "never"- Разверните каждый блок прозы в одну строку.
// "preserve"- Ничего не делать, оставить прозу как есть.

//! 17. "quoteProps": "as-needed" - Изменение, когда свойства объектов заключены в кавычки.
// "as-needed"- Добавляйте кавычки вокруг свойств объекта только там, где это необходимо.
// "consistent"- Если хотя бы одно свойство объекта требует заключения в кавычки, заключите в кавычки все свойства.
// "preserve"- Соблюдайте правила использования кавычек в свойствах объектов.

//! 18. "requirePragma": false, - Prettier может ограничить себя только форматными файлами, содержащими специальный комментарий, называемый прагмой, в верхней части файла. Это очень полезно при постепенном переходе больших неформатированных кодовых баз на Prettier.

//! 19. "vueIndentScriptAndStyle": false - Делать ли отступы внутри кода <script>и <style>тегов в файлах Vue.
// false- Не делайте отступы для тегов скриптов и стилей в файлах Vue.
// true- Отступы для тегов скриптов и стилей в файлах Vue.

//! 20.   "embeddedLanguageFormatting": "auto", - Управляет тем, форматирует ли Prettier цитируемый код, встроенный в файл.
// "auto"– Отформатируйте встроенный код, если Prettier может автоматически его идентифицировать.
// "off"- Никогда не форматируйте автоматически встроенный код.
*/